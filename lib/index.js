// Generated by IcedCoffeeScript 1.3.3e
var EventEmitter2, ProxyEmitter, Socket, emitter, fromServer, open,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Socket = require('sockjs-client');

EventEmitter2 = require('EventEmitter2').EventEmitter2;

if (typeof SERVER !== "undefined" && SERVER !== null) {
  Socket = new WebSocket("ws://" + window.location.hostname + ":3000");
} else {
  Socket = new SockJS("http://" + window.location.hostname + ":3000/socket");
}

fromServer = false;

open = false;

ProxyEmitter = (function(_super) {

  __extends(ProxyEmitter, _super);

  function ProxyEmitter() {
    ProxyEmitter.__super__.constructor.apply(this, arguments);
  }

  ProxyEmitter.prototype.on = function(event, cb) {
    if (event === 'socket.open' && open) cb();
    if (event !== 'socket.open' && event !== 'socket.close') {
      Socket.send(JSON.stringify(['subscribe', event]));
    }
    return ProxyEmitter.__super__.on.apply(this, arguments);
  };

  ProxyEmitter.prototype.off = function(event, callback) {
    if (event !== 'socket.open' && event !== 'socket.close') {
      return Socket.send(JSON.stringify(['unsubscribe', event]));
    }
  };

  return ProxyEmitter;

})(EventEmitter2);

emitter = new ProxyEmitter({
  wildcard: true,
  delimiter: '.',
  maxListeners: 20
});

emitter.onAny(function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  if (!fromServer) {
    return Socket.send(JSON.stringify(['propagate', [this.event].concat(args)]));
  } else {
    return fromServer = false;
  }
});

Socket.onopen = function() {
  emitter.emit('socket.open');
  return open = true;
};

Socket.onclose = function() {
  return emitter.emit('socket.close');
};

Socket.onmessage = function(e) {
  var args, command, _ref;
  fromServer = true;
  _ref = JSON.parse(e.data), command = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
  return emitter[command].apply(emitter, args);
};

module.exports = emitter;
