// Generated by IcedCoffeeScript 1.3.3e
var EventEmitter2, Socket,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Socket = require('sockjs-client');

EventEmitter2 = require('EventEmitter2').EventEmitter2;

module.exports = function() {
  var ProxyEmitter, emitter;
  if (typeof SERVER !== "undefined" && SERVER !== null) {
    Socket = new WebSocket("ws://" + window.location.hostname + ":3000");
  } else {
    Socket = new SockJS("http://" + window.location.hostname + ":3000/socket");
  }
  ProxyEmitter = (function(_super) {

    __extends(ProxyEmitter, _super);

    function ProxyEmitter() {
      ProxyEmitter.__super__.constructor.apply(this, arguments);
    }

    ProxyEmitter.prototype.on = function() {
      var args, event;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (event !== 'socket.open' && event !== 'socket.close') {
        Socket.send(JSON.stringify(['subscribe', event]));
      }
      return ProxyEmitter.__super__.on.apply(this, arguments);
    };

    ProxyEmitter.prototype.off = function(event, callback) {
      if (event !== 'socket.open' && event !== 'socket.close') {
        return Socket.send(JSON.stringify(['unsubscribe', event]));
      }
    };

    return ProxyEmitter;

  })(EventEmitter2);
  emitter = new ProxyEmitter({
    wildcard: true,
    delimiter: '.',
    maxListeners: 20
  });
  emitter.onAny(function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Socket.send(JSON.stringify(['propagate', [this.event].concat(args)]));
  });
  Socket.onopen = function() {
    return emitter.emit('socket.open');
  };
  Socket.onclose = function() {
    return emitter.emit('socket.close');
  };
  Socket.onmessage = function(e) {
    var args, command, _ref;
    _ref = JSON.parse(e.data), command = _ref[0], args = _ref[1];
    return emitter[command].apply(emitter, args);
  };
  return emitter;
};
